// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
const axios = require('axios');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
const API_BASE_URL = 'http://127.0.0.1:8000/api';
const PROXY_BASE_URL = 'http://localhost:3008/api';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –ª–æ–≥–∞—Ö
function formatTime() {
  return new Date().toLocaleTimeString();
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ API –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
async function testBookingsAPI() {
  console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ô                        ‚ïë
‚ïë ${new Date().toLocaleString()}                       
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
`);

  // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
  const testResults = [];

  // –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ API —á–µ—Ä–µ–∑ axios
  try {
    console.log(`[${formatTime()}] –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ axios –∫ ${API_BASE_URL}/bookings`);
    const directResponse = await axios.get(`${API_BASE_URL}/bookings`);
    const bookingsData = directResponse.data?.bookings || directResponse.data?.data || directResponse.data || [];
    
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: —Å—Ç–∞—Ç—É—Å ${directResponse.status}, –ø–æ–ª—É—á–µ–Ω–æ ${bookingsData.length} –∑–∞–ø–∏—Å–µ–π`);
    testResults.push({
      test: '–ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ axios',
      success: true,
      count: bookingsData.length,
      status: directResponse.status,
      data: bookingsData
    });
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –¥–æ—Å—Ç—É–ø–µ —á–µ—Ä–µ–∑ axios: ${error.message}`);
    if (error.response) {
      console.error(`  –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
      console.error(`  –î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏: ${JSON.stringify(error.response.data)}`);
    }
    testResults.push({
      test: '–ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ axios',
      success: false,
      error: error.message
    });
  }

  // –¢–µ—Å—Ç 2: –î–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä
  try {
    console.log(`[${formatTime()}] –¢–µ—Å—Ç 2: –î–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ –∫ ${PROXY_BASE_URL}/bookings`);
    const proxyResponse = await axios.get(`${PROXY_BASE_URL}/bookings`);
    const bookingsData = proxyResponse.data?.bookings || proxyResponse.data?.data || proxyResponse.data || [];
    
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: —Å—Ç–∞—Ç—É—Å ${proxyResponse.status}, –ø–æ–ª—É—á–µ–Ω–æ ${bookingsData.length} –∑–∞–ø–∏—Å–µ–π`);
    testResults.push({
      test: '–î–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏',
      success: true,
      count: bookingsData.length,
      status: proxyResponse.status,
      data: bookingsData
    });
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: ${error.message}`);
    if (error.response) {
      console.error(`  –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
      console.error(`  –î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏: ${JSON.stringify(error.response.data)}`);
    }
    testResults.push({
      test: '–î–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏',
      success: false,
      error: error.message
    });
  }

  // –¢–µ—Å—Ç 3: –î–æ—Å—Ç—É–ø —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
  try {
    console.log(`[${formatTime()}] –¢–µ—Å—Ç 3: –î–æ—Å—Ç—É–ø —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∫ ${API_BASE_URL}/bookings`);
    
    const minimalResponse = await fetch(`${API_BASE_URL}/bookings`, {
      method: 'GET',
      headers: {
        'Accept': 'application/json'
      },
      mode: 'cors'
    });
    
    if (!minimalResponse.ok) {
      throw new Error(`HTTP error! status: ${minimalResponse.status}`);
    }
    
    const bookingsData = await minimalResponse.json();
    const bookings = bookingsData?.bookings || bookingsData?.data || bookingsData || [];
    
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: —Å—Ç–∞—Ç—É—Å ${minimalResponse.status}, –ø–æ–ª—É—á–µ–Ω–æ ${Array.isArray(bookings) ? bookings.length : '–Ω–µ –º–∞—Å—Å–∏–≤'} –∑–∞–ø–∏—Å–µ–π`);
    testResults.push({
      test: '–î–æ—Å—Ç—É–ø —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏',
      success: true,
      count: Array.isArray(bookings) ? bookings.length : '–Ω–µ –º–∞—Å—Å–∏–≤',
      status: minimalResponse.status,
      data: bookings
    });
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏: ${error.message}`);
    testResults.push({
      test: '–î–æ—Å—Ç—É–ø —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏',
      success: false,
      error: error.message
    });
  }

  // –¢–µ—Å—Ç 4: –î–æ—Å—Ç—É–ø –∫ –æ–¥–Ω–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ (–µ—Å–ª–∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–∞—Ö –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã –∑–∞–ø–∏—Å–∏)
  const successfulTests = testResults.filter(test => test.success && test.data && Array.isArray(test.data) && test.data.length > 0);
  
  if (successfulTests.length > 0) {
    const sampleBookingId = successfulTests[0].data[0].id;
    
    try {
      console.log(`[${formatTime()}] –¢–µ—Å—Ç 4: –î–æ—Å—Ç—É–ø –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ ID=${sampleBookingId}`);
      const detailResponse = await axios.get(`${API_BASE_URL}/bookings/${sampleBookingId}`);
      const bookingDetail = detailResponse.data?.booking || detailResponse.data?.data || detailResponse.data || {};
      
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: —Å—Ç–∞—Ç—É—Å ${detailResponse.status}, –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏`);
      console.log(`  ID: ${bookingDetail.id}`);
      console.log(`  –ö–ª–∏–µ–Ω—Ç: ${bookingDetail.clientName || bookingDetail.full_name || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`  –î–∞—Ç–∞: ${bookingDetail.date || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`);
      
      testResults.push({
        test: `–î–æ—Å—Ç—É–ø –∫ –∑–∞–ø–∏—Å–∏ ID=${sampleBookingId}`,
        success: true,
        status: detailResponse.status,
        data: bookingDetail
      });
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏: ${error.message}`);
      if (error.response) {
        console.error(`  –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
        console.error(`  –î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏: ${JSON.stringify(error.response.data)}`);
      }
      testResults.push({
        test: `–î–æ—Å—Ç—É–ø –∫ –∑–∞–ø–∏—Å–∏ ID=${sampleBookingId}`,
        success: false,
        error: error.message
      });
    }
  }

  // –í—ã–≤–æ–¥ –æ–±—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–æ–≤
  console.log('\nüìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ô:');
  testResults.forEach((result, index) => {
    console.log(`${index + 1}. ${result.test}: ${result.success ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞'}`);
    if (result.success) {
      console.log(`   –°—Ç–∞—Ç—É—Å: ${result.status}, –ø–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${result.count || 'N/A'}`);
    } else {
      console.log(`   –û—à–∏–±–∫–∞: ${result.error}`);
    }
  });

  // –û–±—â–∏–π –∏—Ç–æ–≥
  const successCount = testResults.filter(r => r.success).length;
  console.log(`\n‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount} –∏–∑ ${testResults.length} —Ç–µ—Å—Ç–æ–≤`);
  console.log(`${successCount === testResults.length ? 'üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!' : '‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏!'}`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
testBookingsAPI().catch(error => {
  console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
});
