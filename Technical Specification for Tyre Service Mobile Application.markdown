# Техническое задание на разработку мобильного приложения для партнеров и клиентов торговой сети «Твоя шина»

## 1. Общие положения
### 1.1. Цель проекта
Разработка мобильного приложения для партнеров и клиентов торговой сети «Твоя шина» с целью автоматизации процессов управления шиномонтажными услугами, включая регистрацию партнеров, управление торговыми точками, создание расписания и запись клиентов на обслуживание.

### 1.2. Целевая аудитория
- **Партнеры**: Шиномонтажные мастерские, зарегистрированные в системе администратором.
- **Клиенты**: Конечные пользователи, желающие записаться на шиномонтаж.
- **Администраторы**: Сотрудники торговой сети, управляющие списком партнеров.

### 1.3. Платформы
- Мобильное приложение для iOS (версии 15.0 и выше) и Android (версии 10.0 и выше).
- Веб-интерфейс для администраторов (опционально, в зависимости от бюджета).

## 2. Бизнес-процессы
### 2.1. Регистрация и управление партнерами
- Администратор создает профиль партнера, указывая название компании, контактное лицо, email и телефон. Система генерирует временный пароль, отправляемый партнеру на email.
- Партнер входит в приложение, используя предоставленные учетные данные, и может изменить пароль.
- Администратор может деактивировать или удалить партнера, что ограничивает доступ к системе и скрывает связанные торговые точки из клиентского приложения.

### 2.2. Управление торговыми точками и расписанием
- Партнер создает торговую точку, указывая адрес, название и геолокацию. Система проверяет корректность адреса через API карт.
- Для каждой точки партнер задает часы работы (например, 9:00–20:00) и количество постов монтажа.
- Партнер настраивает длительность временных слотов для каждого поста (например, 40 или 50 минут), что определяет доступные интервалы для записи.
- Расписание автоматически генерируется на основе рабочих часов и длительности слотов, с возможностью ручной корректировки партнером.

### 2.3. Запись на обслуживание
- Клиент выбирает город, просматривает доступные шиномонтажные точки и их расписание.
- Клиент выбирает свободный временной слот, вводит ФИО, телефон и номер автомобиля. Система резервирует слот и отправляет подтверждение клиенту (push-уведомление и/или email).
- Партнер видит новую запись в расписании и может отменить или изменить ее, уведомляя клиента.
- Клиент может отменить запись через приложение, что освобождает слот и уведомляет партнера.

### 2.4. Уведомления и взаимодействие
- Партнеры получают push-уведомления о новых записях и отменах.
- Клиенты получают напоминания о записи за 24 часа и подтверждение после бронирования.
- Администраторы получают уведомления о новых партнерах, требующих проверки.

## 3. Функциональные требования

### 3.1. Роли пользователей
- **Администратор**:
  - Регистрация и удаление партнеров.
  - Просмотр списка партнеров и их данных.
- **Партнер**:
  - Управление личным кабинетом.
  - Создание и редактирование торговых точек.
  - Настройка расписания работы и постов.
  - Управление записями клиентов.
- **Клиент**:
  - Выбор города и шиномонтажа.
  - Просмотр доступных временных слотов.
  - Создание записи на обслуживание.

### 3.2. Функционал приложения

#### 3.2.1. Администратор
- **Регистрация партнера**:
  - Ввод данных: название компании, контактное лицо, email, телефон
  - Обязательная двухфакторная аутентификация (2FA)
  - Автоматическая отправка учетных данных партнеру на email
- **Управление партнерами**:
  - Просмотр списка партнеров с фильтрацией по названию и статусу
  - Деактивация/активация партнера с указанием причины
  - Мониторинг активности партнеров

#### 3.2.2. Партнер (Личный кабинет)
- **Создание и управление торговыми точками**:
  - Добавление точки: адрес, название, геолокация (интеграция с MapService)
  - Валидация адреса через MapService
  - Автоматическое получение координат
  - Расчет расстояний между точками
- **Настройка параметров точки**:
  - Гибкая настройка рабочих часов для каждого дня недели
  - Поддержка специальных режимов работы (выходные, праздники)
  - Управление постами и их статусами
- **Управление записями клиентов**:
  - Календарный и списочный вид расписания
  - Фильтрация по статусам и датам
  - Поддержка метаданных для записей
  - Real-time обновления через веб-сокеты

#### 3.2.3. Клиент
- **Выбор шиномонтажа**:
  - Геолокация с автоматическим определением ближайших точек
  - Фильтрация по расстоянию и рейтингу
  - Детальная информация о каждой точке
- **Запись на обслуживание**:
  - Интерактивный выбор времени с учетом загруженности
  - Предварительный расчет длительности услуг
  - Возможность выбора дополнительных услуг
- **Управление записями**:
  - Push-уведомления о статусе записи
  - История посещений
  - Возможность повторной записи

### 3.3. Нефункциональные требования
- **Производительность**: 
  - Время отклика интерфейса не более 1 секунды при нормальной нагрузке
  - Время загрузки приложения не более 3 секунд
  - Время отклика API не более 500мс для 95% запросов
- **Масштабируемость**: 
  - Поддержка до 1000 партнеров и 10 000 клиентов в первый год
  - Возможность горизонтального масштабирования системы
  - Поддержка до 100 одновременных подключений на один сервер
- **Безопасность**:
  - Шифрование данных (HTTPS, AES-256 для хранения паролей)
  - Аутентификация пользователей (email/пароль, возможно, с двухфакторной аутентификацией для администраторов)
  - Защита от SQL-инъекций и XSS-атак
  - Регулярное резервное копирование данных (каждые 6 часов)
  - Соответствие требованиям GDPR и локальному законодательству о защите персональных данных
- **Интерфейс**:
  - Адаптивный и интуитивно понятный дизайн
  - Поддержка русского языка
  - Соответствие гайдлайнам iOS (Human Interface Guidelines) и Android (Material Design)
  - Поддержка темной темы
  - Минимальный размер шрифта 14sp для обеспечения читаемости
- **Офлайн-режим**:
  - Кеширование данных о записях
  - Локальное хранение истории
  - Синхронизация при восстановлении соединения
- **Производительность мобильного приложения**:
  - Оптимизация размера приложения (не более 50MB)
  - Эффективное использование памяти
  - Оптимизация батареи

## 4. Технические требования

### 4.1. Архитектура
- **Фронтенд**:
  - Мобильное приложение: React Native (версия 0.72.0 и выше)
  - Веб-интерфейс администратора: React.js (версия 18.0.0 и выше)
- **Бэкенд**:
  - Язык: PHP 8.2
  - Фреймворк: Laravel 10.x
  - База данных: PostgreSQL 15.x
  - API: RESTful API с JSON, версионирование через URL (v1, v2)
  - Очереди: Redis для обработки фоновых задач
  - Кэширование: Redis для кэширования данных
  - Валидация: Отдельные Request классы для каждого эндпоинта
  - Документация: OpenAPI (Swagger) для API документации
  - Тесты: PHPUnit с покрытием кода > 80%
- **Инфраструктура**:
  - Хостинг: AWS/Google Cloud/Yandex Cloud
  - CI/CD: GitHub Actions с автоматическим деплоем
  - Мониторинг: 
    - Sentry для отслеживания ошибок
    - Prometheus + Grafana для метрик производительности
    - ELK Stack для централизованного логирования
  - Безопасность:
    - JWT для API аутентификации
    - 2FA для администраторов
    - Rate limiting для API endpoints
    - Автоматическое резервное копирование каждые 6 часов

### 4.2. Интеграции
- **Карты**: 
  - Google Maps API v3 или Яндекс.Карты API v2
  - Кэширование геоданных на стороне клиента
  - Fallback на статичные карты при недоступности API
- **Push-уведомления**: 
  - Firebase Cloud Messaging (FCM)
  - Локальные уведомления для офлайн-режима
- **Email-уведомления**: 
  - SendGrid API v3
  - Шаблоны писем на русском языке
  - Очередь отправки для обеспечения надежности
- **Аналитика**: 
  - Google Analytics 4
  - Amplitude для пользовательской аналитики
  - Собственные метрики для бизнес-аналитики

### 4.3. Структура базы данных (основные сущности)
- **Users**: id, role (admin/partner/client), email, password_hash, created_at.
- **Partners**: id, user_id, company_name, contact_person, phone, status.
- **ServicePoints**: id, partner_id, name, address, lat, lng, working_hours.
- **Posts**: id, service_point_id, post_number, slot_duration (например, 40 или 50 минут).
- **Schedules**: id, post_id, date, start_time, end_time, is_booked.
- **Bookings**: id, schedule_id, client_id, full_name, phone, car_number, created_at.

### 4.4. Кэширование
- **Уровни кэширования**:
  - Redis для кэширования на уровне приложения
  - CDN для статических ресурсов
  - Локальное кэширование на мобильном устройстве
- **Стратегии кэширования**:
  - TTL для кэшированных данных: 5 минут
  - Инвалидация кэша при изменении данных
  - Кэширование геоданных на 24 часа

### 4.5. Логирование и мониторинг
- **Уровни логирования**:
  - ERROR: критические ошибки
  - WARN: предупреждения
  - INFO: информационные сообщения
  - DEBUG: отладочная информация
- **Метрики мониторинга**:
  - Время отклика API
  - Использование CPU и памяти
  - Количество активных пользователей
  - Количество ошибок
  - Время выполнения запросов к БД

## 5. Этапы разработки
1. **Аналитика и проектирование** (2 недели):
   - Согласование ТЗ
   - Проектирование UX/UI (Figma)
   - Разработка прототипа интерфейса
   - Создание технического дизайн-документа
2. **Разработка бэкенда** (4 недели):
   - Настройка сервера и базы данных
   - Реализация REST API с использованием Laravel
   - Интеграция с внешними сервисами
   - Настройка CI/CD
3. **Разработка фронтенда** (6 недель):
   - Реализация мобильного приложения (React Native)
   - Реализация веб-интерфейса администратора
   - Интеграция с бэкендом
4. **Тестирование** (2 недели):
   - Unit-тесты (покрытие кода не менее 80%)
   - Интеграционное тестирование
   - Нагрузочное тестирование (до 1000 одновременных пользователей)
   - Тестирование UX/UI на различных устройствах
   - Тестирование безопасности (OWASP Top 10)
5. **Релиз и поддержка** (2 недели):
   - Публикация в App Store и Google Play
   - Настройка мониторинга и аналитики
   - Исправление багов после релиза
   - Настройка системы автоматического обновления

## 6. Доставляемые результаты
- Исходный код приложения (репозиторий Git).
- Документация API (Swagger/Postman).
- Руководство пользователя для администраторов, партнеров и клиентов.
- Опубликованное приложение в App Store и Google Play.

## 7. Критерии приемки
- Все функции, описанные в разделе 3, реализованы и протестированы
- Приложение стабильно работает на iOS 15.0+ и Android 10.0+
- Время отклика API не превышает 1 секунды при нагрузке до 1000 одновременных пользователей
- Успешное прохождение тестирования безопасности (отсутствие уязвимостей SQL-инъекций, XSS)
- Положительные отзывы от тестовых групп партнеров и клиентов (не менее 80% удовлетворенности)
- Покрытие кода тестами не менее 80%
- Успешное прохождение нагрузочного тестирования
- Соответствие требованиям App Store и Google Play
- Наличие полной технической документации

## 8. Риски
- Задержки в согласовании дизайна интерфейса
- Ограничения по производительности при большом числе записей
- Проблемы с публикацией в App Store/Google Play из-за строгих требований
- Зависимость от внешних API (карты, push-уведомления)
- Необходимость адаптации под изменения в законодательстве о персональных данных
- Возможные проблемы с масштабированием при резком росте пользователей

## 9. Предполагаемый бюджет и сроки
- **Срок разработки**: 16 недель.
- **Бюджет**: Оценивается отдельно на основе состава команды (разработчики, дизайнер, тестировщики).